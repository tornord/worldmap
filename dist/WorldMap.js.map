{"version":3,"sources":["../src/WorldMap.js"],"names":["window","mids","path","countriesByCode","countries","d","code","WorldMap","dataByCountryCode","viewer","value","setValue","INITIAL_VALUE","current","fitToViewer","lastCountryClick","countryClick","e","target","id","TOOL_AUTO","console","log","event","x","y","midX","toFixed","midY","push","position","Object","values","map","i","a","entries","name","fontSize"],"mappings":"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","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\nimport {\n  INITIAL_VALUE,\n  ReactSVGPanZoom,\n  TOOL_AUTO,\n  fitSelection,\n  zoomOnViewerCenter,\n  fitToViewer,\n} from \"react-svg-pan-zoom\";\nimport { svgPathProperties } from \"svg-path-properties\";\nimport countries from \"./countries\";\nimport keyBy from \"./keyBy\";\n\nwindow.mids = {};\nwindow.path = [];\nconst countriesByCode = keyBy(countries, (d) => d.code);\n\nexport default function WorldMap({ dataByCountryCode }) {\n  const viewer = useRef(null);\n  window.viewer = viewer;\n  const [value, setValue] = useState(INITIAL_VALUE);\n\n  useEffect(() => {\n    viewer.current.fitToViewer();\n  }, []);\n\n  let lastCountryClick = null;\n  function countryClick(e) {\n    const code = e.target.id;\n    lastCountryClick = code;\n  }\n  return (\n    <div>\n      <ReactSVGPanZoom\n        ref={viewer}\n        width={520}\n        height={520}\n        tool={TOOL_AUTO}\n        value={value}\n        onChangeValue={setValue}\n        onZoom={(e) => {\n          // console.log(\"zoom\", e, viewer.current.getValue());\n        }}\n        onPan={(e) => {\n          // console.log(\"pan\", e, viewer.current.getValue());\n        }}\n        onChangeTool={(d) => console.log(\"onChangeTool\", d)}\n        onClick={(event) => {\n          const { x, y } = event;\n          window.mids[lastCountryClick] = {\n            code: lastCountryClick,\n            midX: x.toFixed(1),\n            midY: y.toFixed(1),\n          };\n          window.path.push({ x, y });\n          console.log(\"click\", window.mids[lastCountryClick]);\n        }}\n        scaleFactor={1.1}\n        scaleFactorMin={0.3}\n        scaleFactorMax={100}\n        scaleFactorOnWheel={1.1}\n        toolbarProps={{ position: \"none\" }}\n        miniatureProps={{ position: \"none\" }}\n        detectAutoPan={false}\n        background={\"#fff\"}\n      >\n        <svg id=\"world\" version=\"1.1\" width={2000} height={857} preserveAspectRatio=\"xMidYMid\">\n          {Object.values(countriesByCode).map((d, i) => (\n            <path\n              key={i}\n              id={d.code}\n              className={dataByCountryCode[d.code] ? \"selected\" : \"\"}\n              d={d.path}\n              onClick={(e) => countryClick(e)}\n            />\n          ))}\n          {value.a\n            ? Object.entries(dataByCountryCode).map((d, i) => {\n                const { name, midX, midY } = countriesByCode[d[0]];\n                const fontSize = (5 * 2.15) / value.a;\n                return (\n                  <text\n                    key={i}\n                    y={midY}\n                    className=\"selected country-text\"\n                    fontSize={fontSize.toFixed(2)}\n                    alignmentBaseline=\"middle\"\n                  >\n                    <tspan className=\"row1\" x={midX} dy={0}>\n                      {name}\n                    </tspan>\n                    <tspan className=\"row2\" x={midX} dy={(fontSize * 9) / 8}>\n                      {d[1].value}\n                    </tspan>\n                  </text>\n                );\n              })\n            : null}\n        </svg>\n      </ReactSVGPanZoom>\n    </div>\n  );\n}\n\n// {Object.entries(totalsPerCountry).map((d, i) => {\n//   const { name, midX, midY } = countriesByCode[d[0]];\n"],"file":"WorldMap.js"}